#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed Mar  8 15:25:29 2017
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
set PROG [lindex $argv 0]
spawn ./$PROG tests/t2.sdc
match_max 100000
expect -exact "=== SDC Virtual Machine Part 2 ===\r
\r
Initial CPU:\r
CPU STATE:\r
==========\r
PC:  00\r
IR:  0000\r
RUNNING: 1\r
R0:     0\r
R1:     0\r
R2:     0\r
R3:     0\r
R4:     0\r
R5:     0\r
R6:     0\r
R7:     0\r
R8:     0\r
R9:     0\r
MEMORY: @Loc, value, instr (nonzero values only):\r
@  00   1234  LD    R2,  34\r
@  01   3456  ADD   R4,  56\r
@  02  -4567  NEG   R5\r
@  04   2568  ST    R5,  68\r
\r
Beginning execution; type h for help\r
\$> "
send -- "d\r"
expect -exact "d\r
CPU STATE:\r
==========\r
PC:  00\r
IR:  0000\r
RUNNING: 1\r
R0:     0\r
R1:     0\r
R2:     0\r
R3:     0\r
R4:     0\r
R5:     0\r
R6:     0\r
R7:     0\r
R8:     0\r
R9:     0\r
MEMORY: @Loc, value, instr (nonzero values only):\r
@  00   1234  LD    R2,  34\r
@  01   3456  ADD   R4,  56\r
@  02  -4567  NEG   R5\r
@  04   2568  ST    R5,  68\r
\$> "
send -- "0\r"
expect -exact "0\r
Number of cycles should be greater than 0\r
\$> "
send -- "1\r"
expect -exact "1\r
LD    R2,  34\r
     R2 <- M\[34\] = 0\r
\$> "
send -- "10\r"
expect -exact "10\r
ADD   R4,  56\r
     R4 <- R4 + M\[56\] = 0 + 0 = 0\r
NEG   R5\r
         R5 <- -R5 = 0\r
HALT\r
     Running flag <- 0\r
\$> "
send -- "q\r"
expect eof
