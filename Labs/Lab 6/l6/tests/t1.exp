#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed Mar  8 15:23:09 2017
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
set PROG [lindex $argv 0]
spawn ./$PROG tests/t1.sdc
match_max 100000
expect -exact "=== SDC Virtual Machine Part 2 ===\r
\r
Initial CPU:\r
CPU STATE:\r
==========\r
PC:  00\r
IR:  0000\r
RUNNING: 1\r
R0:     0\r
R1:     0\r
R2:     0\r
R3:     0\r
R4:     0\r
R5:     0\r
R6:     0\r
R7:     0\r
R8:     0\r
R9:     0\r
Encountered sentinel 10000 at location 25. Exiting read loop.\r
MEMORY: @Loc, value, instr (nonzero values only):\r
@  00   5178  LDM   R1,  78\r
@  01  -5278  LDM   R2, -78\r
@  02   6189  ADDM  R1,  89\r
@  03  -6289  ADDM  R2, -89\r
@  04  -2145  ST    R1,  45\r
@  05   1345  LD    R3,  45\r
@  06   3345  ADD   R3,  45\r
@  07   4367  NEG   R3\r
@  08   7810  BR    10\r
@  09   7009  BR     9\r
@  10   8112  BRP   R1,  12\r
@  11   7011  BR    11\r
@  12  -8214  BRN   R2,  14\r
@  13   7013  BR    13\r
@  14   9011  GETC\r
@  15  -9199  OUT \r
@  16   9221  PUTS  21\r
@  17   9345  DMP \r
@  18  -9455  MEM \r
@  19   9500  NOP \r
@  21   0097  HALT\r
@  22   0065  HALT\r
@  23   0048  HALT\r
\r
Beginning execution; type h for help\r
\$> "
send -- "h\r"
expect -exact "h\r
Simulator commands:\r
h or ? for help (print this message)\r
d to dump the CPU and Memory\r
An integer > 0 to execute that many instruction cycles\r
Or just return, which executes one instruction cycle\r
\$> "
send -- "d"
expect -exact " "
send -- "d\r"
expect -exact "d\r
CPU STATE:\r
==========\r
PC:  00\r
IR:  0000\r
RUNNING: 1\r
R0:     0\r
R1:     0\r
R2:     0\r
R3:     0\r
R4:     0\r
R5:     0\r
R6:     0\r
R7:     0\r
R8:     0\r
R9:     0\r
MEMORY: @Loc, value, instr (nonzero values only):\r
@  00   5178  LDM   R1,  78\r
@  01  -5278  LDM   R2, -78\r
@  02   6189  ADDM  R1,  89\r
@  03  -6289  ADDM  R2, -89\r
@  04  -2145  ST    R1,  45\r
@  05   1345  LD    R3,  45\r
@  06   3345  ADD   R3,  45\r
@  07   4367  NEG   R3\r
@  08   7810  BR    10\r
@  09   7009  BR     9\r
@  10   8112  BRP   R1,  12\r
@  11   7011  BR    11\r
@  12  -8214  BRN   R2,  14\r
@  13   7013  BR    13\r
@  14   9011  GETC\r
@  15  -9199  OUT \r
@  16   9221  PUTS  21\r
@  17   9345  DMP \r
@  18  -9455  MEM \r
@  19   9500  NOP \r
@  21   0097  HALT\r
@  22   0065  HALT\r
@  23   0048  HALT\r
\$> "
send -- "\r"
expect -exact "\r
LDM   R1,  78\r
     R1 <- 78\r
\$> "
send -- "\r"
expect -exact "\r
LDM   R2, -78\r
     R2 <- -78\r
\$> "
send -- "\r"
expect -exact "\r
ADDM  R1,  89\r
     R1 <- R1 + 89 = 78 + 89 = 167\r
\$> "
send -- "5\r"
expect -exact "5\r
ADDM  R2, -89\r
     R2 <- R2 + -89 = -78 + -89 = -167\r
ST    R1,  45\r
     M\[45\] <- R1 = 167\r
LD    R3,  45\r
     R3 <- M\[45\] = 167\r
ADD   R3,  45\r
     R3 <- R3 + M\[45\] = 167 + 167 = 334\r
NEG   R3\r
         R3 <- -R3 = -334\r
\$> "
send -- "5\r"
expect -exact "5\r
BR    10\r
         PC <- 10\r
BRP   R1,  12\r
     PC <- 12 if R1 = 167 >= 0: Yes\r
BRN   R2,  14\r
     PC <- 14 if R2 = -167 <= 0: Yes\r
GETC\r
             Enter a char (and/or press return): "
send -- "c\r"
expect -exact "c\r
                               R0 <- 99\r
OUT \r
             Print char in R0 (= 99): c\r
\$> "
send -- "\r"
expect -exact "\r
PUTS  21\r
         String: aA0\r
\$> "
send -- "\r"
expect -exact "\r
DMP \r
\r
CPU STATE:\r
==========\r
PC:  18\r
IR:  9345\r
RUNNING: 1\r
R0:    99\r
R1:   167\r
R2:  -167\r
R3:  -334\r
R4:     0\r
R5:     0\r
R6:     0\r
R7:     0\r
R8:     0\r
R9:     0\r
\$> "
send -- "\r"
expect -exact "\r
MEM \r
\r
MEMORY: @Loc, value, instr (nonzero values only):\r
@  00   5178  LDM   R1,  78\r
@  01  -5278  LDM   R2, -78\r
@  02   6189  ADDM  R1,  89\r
@  03  -6289  ADDM  R2, -89\r
@  04  -2145  ST    R1,  45\r
@  05   1345  LD    R3,  45\r
@  06   3345  ADD   R3,  45\r
@  07   4367  NEG   R3\r
@  08   7810  BR    10\r
@  09   7009  BR     9\r
@  10   8112  BRP   R1,  12\r
@  11   7011  BR    11\r
@  12  -8214  BRN   R2,  14\r
@  13   7013  BR    13\r
@  14   9011  GETC\r
@  15  -9199  OUT \r
@  16   9221  PUTS  21\r
@  17   9345  DMP \r
@  18  -9455  MEM \r
@  19   9500  NOP \r
@  21   0097  HALT\r
@  22   0065  HALT\r
@  23   0048  HALT\r
@  45   0167  HALT\r
\$> "
send -- "\r"
expect -exact "\r
NOP \r
\r
\$> "
send -- "\r"
expect -exact "\r
HALT\r
     Running flag <- 0\r
\$> "
send -- "\r"
expect -exact "\r
Halted\r
\$> "
send -- "q\r"
expect eof
